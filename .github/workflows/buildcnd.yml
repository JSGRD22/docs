name: DDeploy to BunnyCDN?

on: [push, workflow_dispatch]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
        working-directory: ${{ env.BUILD_PATH }}
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Deploy to BunnyCDN
        uses: ayeressian/bunnycdn-storage-deploy@v2.2.3
        with:
          source: "../../../dist"
          destination: "www/aaa"
          storageEndpoint: "storage.bunnycdn.com"
          storageZoneName: "${{ secrets.STORAGE_NAME }}"
          storagePassword: "${{ secrets.STORAGE_PASSWORD }}"
          upload: "true"
          remove: "false"
          purgePullZone: "false"

  build2:
    name: Build2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Build project
      run: npm run build

    - name: Deploy to FTP
      uses: SamKirkland/FTP-Deploy-Action@4.3.0
      with:
        server: ftp://storage.bunnycdn.com
        username: ${{ secrets.STORAGE_NAME }}
        password: ${{ secrets.STORAGE_PASSWORD }}
        local-dir: ./dist/
        server-dir: /www/